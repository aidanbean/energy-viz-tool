{"version":3,"sources":["../../server/pi/piFetchers.js"],"names":["fetch","require","piBaseUrl","piWebIdPath","dataServer","fetchWebId_byPoint","tagName","then","res","json","WebId","fetchWebId_byDataServer","fetchStream_value","fetchStream_byMonths","startDate","endDate","interval","startTime","endTime","fetchStream_byMinutes","module","exports"],"mappings":";;AAAA;;;AAGA,IAAMA,QAAQC,QAAQ,YAAR,CAAd;;AAEA,IAAMC,YAAY,iDAAlB;AACA,IAAMC,cAAc,6BAApB;AACA,IAAMC,aAAa,qEAAnB;;AAEA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACpC;;;;AAIA,WAAON,WAASE,SAAT,GAAqBC,WAArB,GAAmCG,OAAnC,EACFC,IADE,CACG;AAAA,eAAOC,IAAIC,IAAJ,EAAP;AAAA,KADH,EAEFF,IAFE,CAEG;AAAA,eAAQE,KAAKC,KAAb;AAAA,KAFH,CAAP;AAGH,CARD;;AAUA,IAAMC,0BAA0B,SAA1BA,uBAA0B,CAACL,OAAD,EAAa;AACzC;;;;;AAMA,WAAON,WAASE,SAAT,GAAqBE,UAArB,GAAkCE,OAAlC,EACFC,IADE,CACG;AAAA,eAAOC,IAAIC,IAAJ,EAAP;AAAA,KADH,CAAP;AAEH,CATD;;AAWA,IAAMG,oBAAoB,SAApBA,iBAAoB,CAACF,KAAD,EAAW;AACjC;;;;;;;;;;;;;;AAgBA,WAAOV,MAASE,SAAT,gBAA6BQ,KAA7B,aACFH,IADE,CACG;AAAA,eAAOC,IAAIC,IAAJ,EAAP;AAAA,KADH,CAAP;AAEH,CAnBD;;AAqBA,IAAMI,uBAAuB,SAAvBA,oBAAuB,CAACH,KAAD,EAAQI,SAAR,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAyC;AAClE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,QAAIC,YAAYH,YAAY,cAA5B,CA9CkE,CA8CtB;AAC5C,QAAII,UAAUH,UAAU,cAAxB,CA/CkE,CA+C1B;;AAExC,WAAOf,MAASE,SAAT,gBAA6BQ,KAA7B,gCAA6DO,SAA7D,mCACgBC,OADhB,kBACoCF,QADpC,EAEET,IAFF,CAEO;AAAA,eAAOC,IAAIC,IAAJ,EAAP;AAAA,KAFP,CAAP;AAGH,CApDD;;AAsDA,IAAMU,wBAAwB,SAAxBA,qBAAwB,CAACT,KAAD,EAAQO,SAAR,EAAmBC,OAAnB,EAA4BF,QAA5B,EAAyC;AACnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,WAAOhB,MAASE,SAAT,gBAA6BQ,KAA7B,gCAA6DO,SAA7D,mCACgBC,OADhB,kBACoCF,QADpC,EAEET,IAFF,CAEO;AAAA,eAAOC,IAAIC,IAAJ,EAAP;AAAA,KAFP,CAAP;AAGH,CAhDD;;AAkDAW,OAAOC,OAAP,GAAiB;AACbhB,0CADa;AAEbM,oDAFa;AAGbC,wCAHa;AAIbC,8CAJa;AAKbM;AALa,CAAjB","file":"piFetchers.js","sourcesContent":["/* TODO - convert JSON Timestamps from UTC to local \n        - ensure that JSON Timestamps are adjusted to daylight savings time */\n\nconst fetch = require('node-fetch');\n\nconst piBaseUrl = 'https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/';\nconst piWebIdPath = 'points?path=\\\\\\\\util-pi-p\\\\';\nconst dataServer = 'dataservers/s09KoOKByvc0-uxyvoTV1UfQVVRJTC1QSS1Q/points?nameFilter=';\n\nconst fetchWebId_byPoint = (tagName) => {\n    /* Example fetch URL: \n        https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/\n        points?path=\\\\UTIL-PI-P\\Giedt_Electricity_demand_kbtu\n    */\n    return fetch(`${piBaseUrl}${piWebIdPath}${tagName}`)\n        .then(res => res.json())\n        .then(json => json.WebId);\n};\n\nconst fetchWebId_byDataServer = (tagName) => {\n    /*  Querying via dataServer allows fetching with wildcards (*)\n\n        Example fetch URL:\n        https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/\n        dataservers/s09KoOKByvc0-uxyvoTV1UfQVVRJTC1QSS1Q/points?nameFilter=Ghausi.CHW*\n    */\n    return fetch(`${piBaseUrl}${dataServer}${tagName}`)\n        .then(res => res.json());\n};\n\nconst fetchStream_value = (WebId) => {\n    /*  Return a single JSON PI stream value using a WebId\n\n        Example fetch URL:\n        https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/\n        streams/P09KoOKByvc0-uxyvoTV1UfQhyIAAAVVRJTC1QSS1QXEdIQVVTSV9DSElMTEVEV0FURVJfRVVJ/value\n\n        Sample JSON Response:\n        {\n            \"Timestamp\": \"2017-12-19T07:59:00Z\",\n            \"Value\": 65.44242,\n            \"UnitsAbbreviation\": \"\",\n            \"Good\": true,\n            \"Questionable\": false,\n            \"Substituted\": false\n        }\n    */\n    return fetch(`${piBaseUrl}streams/${WebId}/value`)\n        .then(res => res.json())\n};\n\nconst fetchStream_byMonths = (WebId, startDate, endDate, interval) => {\n    /*  Return a JSON PI stream with data from startDate to endDate with\n        interval months in between.\n\n        startDate, endDate, interval formats:\n        2016-01-01, 2016-12-01, 1\n\n        Example fetch URL:\n        https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/streams/\n        P09KoOKByvc0-uxyvoTV1UfQhyIAAAVVRJTC1QSS1QXEdIQVVTSV9DSElMTEVEV0FURVJfRVVJ/\n        interpolated?startTime=2016-01-01%20%2B1mo-1s&endTime=2016-12-01%20%2B1mo-1s&interval=1mo\n\n        Sample JSON Response:\n        {\n          \"Links\": {},\n          \"Items\": [\n            {\n              \"Timestamp\": \"2016-01-01T07:59:59Z\",\n              \"Value\": 80.0,\n              \"UnitsAbbreviation\": \"\",\n              \"Good\": true,\n              \"Questionable\": false,\n              \"Substituted\": false\n            },\n            {\n              \"Timestamp\": \"2016-02-01T07:59:59Z\",\n              \"Value\": 81.0,\n              \"UnitsAbbreviation\": \"\",\n              \"Good\": true,\n              \"Questionable\": false,\n              \"Substituted\": false\n            },\n            ...\n            {\n              \"Timestamp\": \"2016-12-01T07:59:59Z\",\n              \"Value\": 63.6807823,\n              \"UnitsAbbreviation\": \"\",\n              \"Good\": true,\n              \"Questionable\": false,\n              \"Substituted\": false\n            }\n          ],\n          \"UnitsAbbreviation\": \"\"\n        }\n    */\n\n    let startTime = startDate + '%20%2B0mo-1s'; // startMonth + 0 months - 1 second\n    let endTime = endDate + '%20%2B0mo-1s'; // endMonth + 0 months - 1 second\n\n    return fetch(`${piBaseUrl}streams/${WebId}/interpolated?startTime=${startTime}\n                &endTime=${endTime}&interval=${interval}`)\n            .then(res => res.json());\n};\n\nconst fetchStream_byMinutes = (WebId, startTime, endTime, interval) => {\n    /*  Return a JSON PI stream with data from startMinute to endMinute with\n        interval minutes in between.\n\n        startMinute, endMinute, interval formats:\n        12-11-2017-6am, 12-11-2017-12pm, 15m\n\n        Example fetch URL:\n        https://ucd-pi-iis.ou.ad3.ucdavis.edu/piwebapi/streams/\n        P09KoOKByvc0-uxyvoTV1UfQhyIAAAVVRJTC1QSS1QXEdIQVVTSV9DSElMTEVEV0FURVJfRVVJ/\n        interpolated?startTime=12-11-2017-6am&endTime=12-11-2017-12pm&interval=15m\n\n        Sample JSON Response:\n        {\n          \"Links\": {},\n          \"Items\": [\n          {\n            \"Timestamp\": \"2017-12-11T06:00:00Z\",\n            \"Value\": 65.34507,\n            \"UnitsAbbreviation\": \"\",\n            \"Good\": true,\n            \"Questionable\": false,\n            \"Substituted\": false\n          },\n          {\n            \"Timestamp\": \"2017-12-11T06:15:00Z\",\n            \"Value\": 65.34524,\n            \"UnitsAbbreviation\": \"\",\n            \"Good\": true,\n            \"Questionable\": false,\n            \"Substituted\": false\n          },\n            ...\n          {\n           \"Timestamp\": \"2017-12-12T00:00:00Z\",\n           \"Value\": 65.35652,\n           \"UnitsAbbreviation\": \"\",\n           \"Good\": true,\n           \"Questionable\": false,\n           \"Substituted\": false\n         }\n         ],\n         \"UnitsAbbreviation\": \"\"\n        }\n    */\n    return fetch(`${piBaseUrl}streams/${WebId}/interpolated?startTime=${startTime}\n                &endTime=${endTime}&interval=${interval}`)\n            .then(res => res.json());\n};\n\nmodule.exports = {\n    fetchWebId_byPoint,\n    fetchWebId_byDataServer,\n    fetchStream_value,\n    fetchStream_byMonths,\n    fetchStream_byMinutes\n}\n"]}